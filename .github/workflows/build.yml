name: Build and Upload JARs

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            release_name: snapshot-linux
            os_name: linux-amd64
          - os: windows-2022
            release_name: snapshot-windows
            os_name: windows-amd64
          - os: macos-14
            release_name: snapshot-macos
            os_name: macos-arm64
          - os: macos-12
            release_name: snapshot-macos-intel
            os_name: macos-amd64

    env:
      SCALA_VERSION: '3.5.2-RC1'
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    defaults:
      run:
        shell: bash
        working-directory: ./

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - uses: graalvm/setup-graalvm@v1
      with:
        java-version: '23'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'

    - name: GraalVM Env
      run: |
        echo "NATIVE_IMAGE_INSTALLED=true" >> $GITHUB_ENV
        echo "GRAALVM_INSTALLED=true" >> $GITHUB_ENV

    - uses: sbt/setup-sbt@v1

    - name: Cache SBT (Unix)
      if: runner.os != 'Windows'
      uses: actions/cache@v4
      with:
        path: |
          ~/.ivy2/cache
          ~/.sbt
          ~/.coursier
          ~/.cache/coursier
        key: ${{ matrix.os }}-sbt-${{ hashFiles('**/*.sbt') }}
        restore-keys: |
          ${{ matrix.os }}-sbt-

    - name: Cache SBT for Windows
      if: runner.os == 'Windows'
      uses: actions/cache@v4
      with:
        path: |
          C:\Users\runneradmin\.ivy2\cache
          C:\Users\runneradmin\.sbt
          C:\Users\runneradmin\.coursier
          C:\Users\runneradmin\AppData\Local\Coursier\cache
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/*.sbt') }}
        restore-keys: |
          ${{ runner.os }}-sbt-

    - name: SBT Clean
      run: sbt clean
      # for some reason clean calls stImport and stImport usually fails at first run
      continue-on-error: true

    # maybe test will fail on the first try because of stImport, the typescript to scala thing.
    - name: Run Tests
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 25
        max_attempts: 3
        shell: bash
        command: sbt test

    - name: Build Common JAR with SBT
      run: sbt common/assembly

    - name: Build CLI JAR with SBT
      run: sbt cli/assembly

    - name: Build LSP JAR with SBT
      run: sbt lsp/assembly

    - name: Build CLI Native Executable
      run: sbt cliNative/nativeLink

    - name: Rename CLI Native Executable
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          mv cli/native/target/scala-${{ env.SCALA_VERSION }}/cli-out.exe cli/native/target/scala-${{ env.SCALA_VERSION }}/chester-out.exe || mv cli/native/target/scala-${{ env.SCALA_VERSION }}/native/chester.cli.Main.exe cli/native/target/scala-${{ env.SCALA_VERSION }}/chester-out.exe
        else
          mv cli/native/target/scala-${{ env.SCALA_VERSION }}/cli-out cli/native/target/scala-${{ env.SCALA_VERSION }}/chester-out || mv cli/native/target/scala-${{ env.SCALA_VERSION }}/native/chester.cli.Main cli/native/target/scala-${{ env.SCALA_VERSION }}/chester-out
        fi

    - name: Generate JS Artifacts for CLI
      run: |
        sbt cliJS/fullLinkJS
        mv cli/js/target/scala-${{ env.SCALA_VERSION }}/cli-opt/main.js cli/js/target/scala-${{ env.SCALA_VERSION }}/chester.js

    - name: Build Native Image for LSP
      run: sbt lsp/nativeImage

    - name: Build Native Image for CLI
      run: sbt cli/nativeImage

    - name: Test Native Image for CLI integrity
      run: ./target/chester integrity

    - name: List files for debugging
      run: find . -type f -name "*.jar" -or -name "chester" -or -name "chester-lsp" -or -name "chester-out" -or -name "*.exe"
      continue-on-error: true

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: "lts/*"
        cache: ''

    - name: Install Node.js dependencies
      working-directory: vscode
      run: npm install

    - name: Build VSCode Extension
      working-directory: vscode
      run: npm run package

    - name: Upload Unix Artifacts
      if: runner.os != 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.release_name }}
        path: |
          ./target/chester-common.jar
          ./target/chester.jar
          ./target/chester-lsp.jar
          ./cli/js/target/scala-${{ env.SCALA_VERSION }}/chester.js
          ./target/chester
          ./target/chester-lsp
          ./cli/native/target/scala-${{ env.SCALA_VERSION }}/chester-out
          ./vscode/chester-language-support-*.vsix

    - name: Upload Windows Artifacts
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.release_name }}
        path: |
          ./target/chester-common.jar
          ./target/chester.jar
          ./target/chester-lsp.jar
          ./cli/js/target/scala-${{ env.SCALA_VERSION }}/chester.js
          ./target/chester.exe
          ./target/chester-lsp.exe
          ./cli/native/target/scala-${{ env.SCALA_VERSION }}/chester-out.exe
          ./vscode/chester-language-support-*.vsix

    - name: Create or Update GitHub Release for Unix
      if: runner.os != 'Windows'
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ matrix.release_name }}
        name: ${{ matrix.release_name }}
        allowUpdates: true
        prerelease: true
        artifacts: |
          ./target/chester-common.jar,
          ./target/chester.jar,
          ./target/chester-lsp.jar,
          ./cli/js/target/scala-${{ env.SCALA_VERSION }}/chester.js,
          ./target/chester,
          ./target/chester-lsp,
          ./cli/native/target/scala-${{ env.SCALA_VERSION }}/chester-out,
          ./vscode/chester-language-support-*.vsix

    - name: Create or Update GitHub Release for Windows
      if: runner.os == 'Windows'
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ matrix.release_name }}
        name: ${{ matrix.release_name }}
        allowUpdates: true
        prerelease: true
        artifacts: |
          ./target/chester-common.jar,
          ./target/chester.jar,
          ./target/chester-lsp.jar,
          ./cli/js/target/scala-${{ env.SCALA_VERSION }}/chester.js,
          ./target/chester.exe,
          ./target/chester-lsp.exe,
          ./cli/native/target/scala-${{ env.SCALA_VERSION }}/chester-out.exe,
          ./vscode/chester-language-support-*.vsix

    # Add OS name to artifacts
    - name: Add OS name to artifacts (Unix)
      if: runner.os != 'Windows'
      run: |
        mv ./target/chester ./target/chester-${{ matrix.os_name }}
        mv ./target/chester-lsp ./target/chester-lsp-${{ matrix.os_name }}
        mv ./cli/native/target/scala-${{ env.SCALA_VERSION }}/chester-out ./cli/native/target/scala-${{ env.SCALA_VERSION }}/chester-out-${{ matrix.os_name }}

    - name: Add OS name to artifacts (Windows)
      if: runner.os == 'Windows'
      run: |
        mv ./target/chester.exe ./target/chester-${{ matrix.os_name }}.exe
        mv ./target/chester-lsp.exe ./target/chester-lsp-${{ matrix.os_name }}.exe
        mv ./cli/native/target/scala-${{ env.SCALA_VERSION }}/chester-out.exe ./cli/native/target/scala-${{ env.SCALA_VERSION }}/chester-out-${{ matrix.os_name }}.exe

    # Create or Update Releases when a tag is pushed
    - name: Create or Update GitHub Release Tag for Unix
      if: runner.os != 'Windows' && startsWith(github.ref, 'refs/tags/')
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        name: ${{ github.ref_name }}
        allowUpdates: true
        prerelease: false
        artifacts: |
          ./target/chester-common.jar,
          ./target/chester.jar,
          ./target/chester-lsp.jar,
          ./cli/js/target/scala-${{ env.SCALA_VERSION }}/chester.js,
          ./target/chester-${{ matrix.os_name }},
          ./target/chester-lsp-${{ matrix.os_name }},
          ./cli/native/target/scala-${{ env.SCALA_VERSION }}/chester-out-${{ matrix.os_name }},
          ./vscode/chester-language-support-*.vsix

    - name: Create or Update GitHub Release Tag for Windows
      if: runner.os == 'Windows' && startsWith(github.ref, 'refs/tags/')
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        name: ${{ github.ref_name }}
        allowUpdates: true
        prerelease: false
        artifacts: |
          ./target/chester-common.jar,
          ./target/chester.jar,
          ./target/chester-lsp.jar,
          ./cli/js/target/scala-${{ env.SCALA_VERSION }}/chester.js,
          ./target/chester-${{ matrix.os_name }}.exe,
          ./target/chester-lsp-${{ matrix.os_name }}.exe,
          ./cli/native/target/scala-${{ env.SCALA_VERSION }}/chester-out-${{ matrix.os_name }}.exe,
          ./vscode/chester-language-support-*.vsix
