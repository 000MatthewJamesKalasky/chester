name: Build and Upload JARs

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SCALA_VERSION: '3.4.2'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '17'

    - name: Cache SBT
      uses: actions/cache@v2
      with:
        path: |
          ~/.ivy2/cache
          ~/.sbt
          ~/.coursier
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/*.sbt') }}
        restore-keys: |
          ${{ runner.os }}-sbt-

    - name: Build with SBT
      working-directory: chester-language-interpreter
      run: sbt clean assembly

    - name: List files for debugging
      run: find chester-language-interpreter -type f -name "*.jar"

    - name: Upload JAR files
      uses: actions/upload-artifact@v3
      with:
        name: assembly-jars
        path: |
          chester-language-interpreter/common/target/scala-${{ env.SCALA_VERSION }}/common.jar
          chester-language-interpreter/interpreter/target/scala-${{ env.SCALA_VERSION }}/interpreter.jar
          chester-language-interpreter/lsp/target/scala-${{ env.SCALA_VERSION }}/lsp.jar
          chester-language-interpreter/repl/target/scala-${{ env.SCALA_VERSION }}/repl.jar

    - name: Check if release exists
      id: check_release
      run: |
        if curl --silent --fail -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/releases/tags/snapshot; then
          echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Create or update GitHub Release
      id: create_update_release
      uses: actions/github-script@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        script: |
          const { data: releases } = await github.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          const release = releases.find(r => r.tag_name === 'snapshot');
          if (process.env.RELEASE_EXISTS === 'true') {
            // Delete existing assets
            const assets = await github.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id
            });
            for (const asset of assets.data) {
              await github.repos.deleteReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: asset.id
              });
            }
            // Update existing release
            const { data: updatedRelease } = await github.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              tag_name: 'snapshot',
              name: 'Snapshot Release',
              draft: false,
              prerelease: true
            });
            return updatedRelease.upload_url;
          } else {
            // Create new release
            const { data: newRelease } = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'snapshot',
              name: 'Snapshot Release',
              draft: false,
              prerelease: true
            });
            return newRelease.upload_url;
          }
        result-encoding: string
        result-format: string

    - name: Upload Release Asset common.jar
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_update_release.outputs.result }}
        asset_path: chester-language-interpreter/common/target/scala-${{ env.SCALA_VERSION }}/common.jar
        asset_name: common.jar
        asset_content_type: application/zip

    - name: Upload Release Asset interpreter.jar
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_update_release.outputs.result }}
        asset_path: chester-language-interpreter/interpreter/target/scala-${{ env.SCALA_VERSION }}/interpreter.jar
        asset_name: interpreter.jar
        asset_content_type: application/zip

    - name: Upload Release Asset lsp.jar
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_update_release.outputs.result }}
        asset_path: chester-language-interpreter/lsp/target/scala-${{ env.SCALA_VERSION }}/lsp.jar
        asset_name: lsp.jar
        asset_content_type: application/zip

    - name: Upload Release Asset repl.jar
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_update_release.outputs.result }}
        asset_path: chester-language-interpreter/repl/target/scala-${{ env.SCALA_VERSION }}/repl.jar
        asset_name: repl.jar
        asset_content_type: application/zip
