package typings.node.anon

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait TypeofconstantsNODEPERFORMANCEGCFLAGSALLAVAILABLEGARBAGE extends StObject {
  
  val NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE: Double
  
  val NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY: Double
  
  val NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED: Double
  
  val NODE_PERFORMANCE_GC_FLAGS_FORCED: Double
  
  val NODE_PERFORMANCE_GC_FLAGS_NO: Double
  
  val NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE: Double
  
  val NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING: Double
  
  val NODE_PERFORMANCE_GC_INCREMENTAL: Double
  
  val NODE_PERFORMANCE_GC_MAJOR: Double
  
  val NODE_PERFORMANCE_GC_MINOR: Double
  
  val NODE_PERFORMANCE_GC_WEAKCB: Double
}
object TypeofconstantsNODEPERFORMANCEGCFLAGSALLAVAILABLEGARBAGE {
  
  inline def apply(
    NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE: Double,
    NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY: Double,
    NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED: Double,
    NODE_PERFORMANCE_GC_FLAGS_FORCED: Double,
    NODE_PERFORMANCE_GC_FLAGS_NO: Double,
    NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE: Double,
    NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING: Double,
    NODE_PERFORMANCE_GC_INCREMENTAL: Double,
    NODE_PERFORMANCE_GC_MAJOR: Double,
    NODE_PERFORMANCE_GC_MINOR: Double,
    NODE_PERFORMANCE_GC_WEAKCB: Double
  ): TypeofconstantsNODEPERFORMANCEGCFLAGSALLAVAILABLEGARBAGE = {
    val __obj = js.Dynamic.literal(NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE = NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE.asInstanceOf[js.Any], NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY = NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY.asInstanceOf[js.Any], NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED = NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED.asInstanceOf[js.Any], NODE_PERFORMANCE_GC_FLAGS_FORCED = NODE_PERFORMANCE_GC_FLAGS_FORCED.asInstanceOf[js.Any], NODE_PERFORMANCE_GC_FLAGS_NO = NODE_PERFORMANCE_GC_FLAGS_NO.asInstanceOf[js.Any], NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE = NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE.asInstanceOf[js.Any], NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING = NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING.asInstanceOf[js.Any], NODE_PERFORMANCE_GC_INCREMENTAL = NODE_PERFORMANCE_GC_INCREMENTAL.asInstanceOf[js.Any], NODE_PERFORMANCE_GC_MAJOR = NODE_PERFORMANCE_GC_MAJOR.asInstanceOf[js.Any], NODE_PERFORMANCE_GC_MINOR = NODE_PERFORMANCE_GC_MINOR.asInstanceOf[js.Any], NODE_PERFORMANCE_GC_WEAKCB = NODE_PERFORMANCE_GC_WEAKCB.asInstanceOf[js.Any])
    __obj.asInstanceOf[TypeofconstantsNODEPERFORMANCEGCFLAGSALLAVAILABLEGARBAGE]
  }
  
  @scala.inline
  implicit open class MutableBuilder[Self <: TypeofconstantsNODEPERFORMANCEGCFLAGSALLAVAILABLEGARBAGE] (val x: Self) extends AnyVal {
    
    inline def setNODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE(value: Double): Self = StObject.set(x, "NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE", value.asInstanceOf[js.Any])
    
    inline def setNODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY(value: Double): Self = StObject.set(x, "NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY", value.asInstanceOf[js.Any])
    
    inline def setNODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED(value: Double): Self = StObject.set(x, "NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED", value.asInstanceOf[js.Any])
    
    inline def setNODE_PERFORMANCE_GC_FLAGS_FORCED(value: Double): Self = StObject.set(x, "NODE_PERFORMANCE_GC_FLAGS_FORCED", value.asInstanceOf[js.Any])
    
    inline def setNODE_PERFORMANCE_GC_FLAGS_NO(value: Double): Self = StObject.set(x, "NODE_PERFORMANCE_GC_FLAGS_NO", value.asInstanceOf[js.Any])
    
    inline def setNODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE(value: Double): Self = StObject.set(x, "NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE", value.asInstanceOf[js.Any])
    
    inline def setNODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING(value: Double): Self = StObject.set(x, "NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING", value.asInstanceOf[js.Any])
    
    inline def setNODE_PERFORMANCE_GC_INCREMENTAL(value: Double): Self = StObject.set(x, "NODE_PERFORMANCE_GC_INCREMENTAL", value.asInstanceOf[js.Any])
    
    inline def setNODE_PERFORMANCE_GC_MAJOR(value: Double): Self = StObject.set(x, "NODE_PERFORMANCE_GC_MAJOR", value.asInstanceOf[js.Any])
    
    inline def setNODE_PERFORMANCE_GC_MINOR(value: Double): Self = StObject.set(x, "NODE_PERFORMANCE_GC_MINOR", value.asInstanceOf[js.Any])
    
    inline def setNODE_PERFORMANCE_GC_WEAKCB(value: Double): Self = StObject.set(x, "NODE_PERFORMANCE_GC_WEAKCB", value.asInstanceOf[js.Any])
  }
}
