name: Build and Upload JARs

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            release_name: snapshot-linux
          - os: windows-latest
            release_name: snapshot-windows
          - os: macos-latest
            release_name: snapshot-macos
          - os: macos-13
            release_name: snapshot-macos-intel

    env:
      SCALA_VERSION: '3.4.2'
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '17'

    - name: Install SBT on macOS
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install sbt
      shell: bash

    - name: Cache SBT
      uses: actions/cache@v3
      with:
        path: |
          ~/.ivy2/cache
          ~/.sbt
          ~/.coursier
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/*.sbt') }}
        restore-keys: |
          ${{ runner.os }}-sbt-

    - name: Build with SBT
      working-directory: chester-in-scala
      run: sbt clean assembly
      shell: bash

    - name: Run Tests
      working-directory: chester-in-scala
      run: sbt test
      shell: bash

    - name: Build Native Image for CLI
      working-directory: chester-in-scala
      run: sbt cli/nativeImage
      shell: bash

    - name: Test Native Image for CLI integrity
      working-directory: chester-in-scala
      run: ./target/chester integrity
      shell: bash

    - name: Build Native Image for LSP
      working-directory: chester-in-scala
      run: sbt lsp/nativeImage
      shell: bash

    - name: List files for debugging
      run: find chester-in-scala -type f -name "*.jar" -or -name "chester" -or -name "chester-lsp" -or -name "*.exe"
      shell: bash
      continue-on-error: true

    - name: Upload JAR and Native Image files (Unix)
      if: runner.os != 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: assembly-jars-and-native-images
        path: |
          chester-in-scala/common/target/scala-${{ env.SCALA_VERSION }}/common.jar
          chester-in-scala/cli/target/scala-${{ env.SCALA_VERSION }}/chester.jar
          chester-in-scala/lsp/target/scala-${{ env.SCALA_VERSION }}/chester-lsp.jar
          chester-in-scala/target/chester
          chester-in-scala/target/chester-lsp

    - name: Upload Windows Executable
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: windows-executables
        path: |
          chester-in-scala/target/chester.exe
          chester-in-scala/target/chester-lsp.exe

    - name: Check if release exists
      id: check_release
      run: |
        if curl --silent --fail -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ matrix.release_name }}; then
          echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Create or update GitHub Release
      id: create_update_release
      uses: actions/github-script@v4
      with:
        script: |
          const { data: releases } = await github.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          const release = releases.find(r => r.tag_name === '${{ matrix.release_name }}');
          if (process.env.RELEASE_EXISTS === 'true') {
            // Delete existing assets
            const assets = await github.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id
            });
            for (const asset of assets.data) {
              await github.repos.deleteReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: asset.id
              });
            }
            // Update existing release
            const { data: updatedRelease } = await github.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              tag_name: '${{ matrix.release_name }}',
              name: '${{ matrix.release_name }}',
              draft: false,
              prerelease: true
            });
            return updatedRelease.upload_url;
          } else {
            // Create new release
            const { data: newRelease } = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ matrix.release_name }}',
              name: '${{ matrix.release_name }}',
              draft: false,
              prerelease: true
            });
            return newRelease.upload_url;
          }
        result-encoding: string
        result-format: string

    - name: Upload Release Asset common.jar
      if: runner.os != 'Windows'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_update_release.outputs.result }}
        asset_path: chester-in-scala/common/target/scala-${{ env.SCALA_VERSION }}/common.jar
        asset_name: common.jar
        asset_content_type: application/zip

    - name: Upload Release Asset chester.jar
      if: runner.os != 'Windows'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_update_release.outputs.result }}
        asset_path: chester-in-scala/cli/target/scala-${{ env.SCALA_VERSION }}/chester.jar
        asset_name: chester.jar
        asset_content_type: application/zip

    - name: Upload Release Asset chester-lsp.jar
      if: runner.os != 'Windows'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_update_release.outputs.result }}
        asset_path: chester-in-scala/lsp/target/scala-${{ env.SCALA_VERSION }}/chester-lsp.jar
        asset_name: chester-lsp.jar
        asset_content_type: application/zip

    - name: Upload Release Asset chester binary
      if: runner.os != 'Windows'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_update_release.outputs.result }}
        asset_path: chester-in-scala/target/chester
        asset_name: chester
        asset_content_type: application/zip

    - name: Upload Release Asset chester-lsp binary
      if: runner.os != 'Windows'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_update_release.outputs.result }}
        asset_path: chester-in-scala/target/chester-lsp
        asset_name: chester-lsp
        asset_content_type: application/zip

    - name: Upload Release Asset chester.exe
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_update_release.outputs.result }}
        asset_path: chester-in-scala/target/chester.exe
        asset_name: chester.exe
        asset_content_type: application/zip

    - name: Upload Release Asset chester-lsp.exe
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_update_release.outputs.result }}
        asset_path: chester-in-scala/target/chester-lsp.exe
        asset_name: chester-lsp.exe
        asset_content_type: application/zip
